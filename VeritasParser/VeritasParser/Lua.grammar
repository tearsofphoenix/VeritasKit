
and              = ‘and’;
break            = ‘break’;
do               = ‘do’;
else             = ‘else’;
elseif           = ‘elseif’;
end              = ‘end’;
false            = ‘false’;
for              = ‘for’;
function         = ‘function’;
goto             = ‘goto’;
if               = ‘if’;
in          	 = ‘in’;
local            = ‘local’;
nil              = ‘nil’;
not              = ‘not’;
or               = ‘or’;
repeat           = ‘repeat’;
return           = ‘return’;
then             = ‘then’;
true          	 = ‘true’;
until            = ‘until’;
while 	      	 = ‘while’;
nil				 = ‘nil’;
dot3			 =  '...';

openCurly           = '{';
closeCurly          = '}';
openParen           = '(';
closeParen          = ')';
openBracket         = '[';
closeBracket        = ']';

comma               = ',';
dot                 = '.';
semi                = ';';
colon               = ':';
assign              = '=';

plus                = '+';
minus               = '-';
times               = '*';
div                 = '/';
mod                 = '%';
caret               = '^';
hash	            = ‘#’;
lt                  = '<';
gt                  = '>';
dot2  				= '..';

ne                  = ‘~=';
eq                  = '==';
le                  = '<=';
ge                  = '>=';

chunk = block
block = stat* retStat?
stat  = semi | varlistStat | functioncall | label | break | goto Name | doStat | whileStat | repeatStat | ifexp | forexp | localexp;

varlistStat = varlist assign explist;
doStat = do block end;
whileStat = while exp doStat;
repeatStat = repeat block until exp;

retStat = return explist? semi?;
label = Word;
funcname = Word ( dot Word)* (colon Word)?;

varlist = var commaVarlist?;
commaVarlist = comma varlist;

var = Word | prefixexp openBracket exp closeBracket | prefixexp dot Word;
namelist = Word commaNamelist?;
commaNamelist = comma namelist;

explist = exp (comma explist)?;
exp = nil | false | true | Number | String | dot3 | functiondef | prefixexp | tableconstructor | binopStat | unopStat;

binopStat = exp binop exp;
unopStat  = unop exp;

prefixexp = var | functioncall | openParen exp closeParen;
functioncall = prefixexp args | prefixexp colon Word args;
args = openParen explist? closeParen | tableconstructor | String;
functiondef = function funcbody;
funcbody = openParen parlist closeParen;
parlist = Empty | namelist (comma dot3)? | dot3;

tableconstructor = openCurly fieldlist? closeCurly;
fieldlist  = field (fieldsep field)* fieldsep?;
field      = openBracket exp closeBracket assign exp | Word assign exp | exp;
fieldsep   = comma | semi;
binop      = plus | minus | times | div | caret | mod | dot2 | lt | le | gt | ge | eq | ne | and | or;
unop       = minus | not | hash;
