//
//  VMKDebugServerBase64String.h
//  VeritasMachineKit
//
//  Created by tearsofphoenix on 13-2-28.
//
//

#ifndef __VMK_VMKDebugServerBase64String__
#define __VMK_VMKDebugServerBase64String__ 1

#define VMKDebugServerBase64String @""

#endif
